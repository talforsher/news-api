import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";
import axios from "axios";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [apiToken, setApiToken] = useState("");
  const [news, setNews] = useState([]);
  const [search, setSearch] = useState("");
  const [meta, setMeta] = useState({});
  const [error, setError] = useState("");

  useEffect(() => {
    const token = localStorage.getItem("apiToken");
    if (token) {
      setApiToken(token);
    }
    const search = localStorage.getItem("search");
    if (search) {
      setSearch(search);
    }
  }, []);

  useEffect(() => {
    if (apiToken) {
      localStorage.setItem("apiToken", apiToken);
    }
  }, [apiToken]);

  useEffect(() => {
    if (search) {
      localStorage.setItem("search", search);
    }
  }, [search]);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && meta.moreResultsAvailable) {
          fetchNews(meta.next);
        }
      },
      { threshold: 1 }
    );

    observer.observe(document.querySelector("#observer"));

    return () => observer.disconnect();
  }, [meta.moreResultsAvailable]);

  const fetchNews = async (url) => {
    try {
      setError("");
      if (!apiToken) {
        alert("Please enter your API token");
        return;
      }
      const res = await axios.get(
        url
          ? url
          : `https://api.webz.io/newsApiLite?token=${apiToken}&q=${search}`
      );
      setNews(url ? [...news, ...res.data.posts] : res.data.posts);

      setMeta({
        totalResults: res.data.totalResults,
        moreResultsAvailable: res.data.moreResultsAvailable,
        next: `https://api.webz.io/${res.data.next}`,
        requestsLeft: res.data.requestsLeft,
      });
    } catch (err) {
      // if api token is not a (8-4-4-4-12) UUID, show error message
      const isUUID =
        /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
      if (!isUUID.test(apiToken)) {
        setError("Invalid API token");
      } else {
        setError("Something went wrong");
      }
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <h1 className={styles.title}>Welcome to your News Feed</h1>
        <div className={styles.stickyHeader}>
          <input
            type="text"
            placeholder="Enter your API token"
            value={apiToken}
            onChange={(e) => setApiToken(e.target.value)}
          />
          {!news.length && (
            <p className={styles.description}>
              Don't have an API token? Get it from{" "}
              <a href="https://webz.io/products/news-api#lite" target="_blank">
                here
              </a>
            </p>
          )}

          <input
            type="text"
            placeholder="Search for news"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                fetchNews();
              }
            }}
          />
          <button className={styles.search} onClick={() => fetchNews()}>
            Search
          </button>

          {error && <span style={{ color: "red" }}>{error}</span>}
          {!!meta.totalResults && (
            <p>
              Total Results: {meta.totalResults} | Requests Left:{" "}
              {meta.requestsLeft}
            </p>
          )}
        </div>
        <div className={styles.news}>
          {news.map((post) => (
            <div key={post.thread.uuid} className={styles.post}>
              {post.thread.main_image && (
                <img
                  src={post.thread.main_image}
                  alt={post.thread.title}
                  style={{
                    width: "100px",
                    height: "100px",
                    objectFit: "cover",
                    borderRadius: "50%",
                  }}
                />
              )}
              <h2>{post.thread.title}</h2>
              <p dangerouslySetInnerHTML={{ __html: post.highlightText }}></p>
              <a href={post.thread.url} target="_blank">
                Read more
              </a>
            </div>
          ))}
        </div>
        <div id="observer"></div>
        {!!meta.totalResults && (
          <p>
            Total Results: {meta.totalResults} | Requests Left:{" "}
            {meta.requestsLeft}
          </p>
        )}
      </main>
      {inter.styles}
    </>
  );
}
